{"version":3,"sources":["context/types.js","context/reducers.js","settings/index.js","context/index.js","components/TodoCounter.js","components/TodoInput.js","components/TodoList.js","components/Toggle.js","App.js","serviceWorker.js","index.js"],"names":["TYPES","FETCH_TODO","FETCH_TODO_SUCCESS","FETCH_TODO_ERROR","ADD_TODO","REMOVE_TODO","TOGGLE_TODO","reducer","state","type","payload","todoList","unshift","id","Math","random","name","complete","filter","todo","status","fetchTodo","configs","todoAPI","initialState","TodoContext","createContext","ContextProvider","children","useImmerReducer","dispatch","useEffect","Axios","get","then","response","data","catch","Provider","value","Todocounter","useContext","todoCount","i","length","doneCount","className","Todoinput","useState","setTodo","onChange","e","target","onClick","preventDefault","Todolist","map","index","key","handleOnChange","htmlFor","Toggle","show","App","TodoCounter","TodoInput","TodoList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","debugContextDevtool","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.043ac585.chunk.js","sourcesContent":["const TYPES = {\r\n  FETCH_TODO: 'FETCH_TODO',\r\n  FETCH_TODO_SUCCESS: \"FETCH_TODO_SUCCESS\",\r\n  FETCH_TODO_ERROR: \"FETCH_TODO_ERROR\",\r\n  ADD_TODO: 'ADD_TODO',\r\n  REMOVE_TODO: 'REMOVE_TODO',\r\n  TOGGLE_TODO: 'TOGGLE_TODO'\r\n};\r\n\r\nexport default TYPES;\r\n","import TYPES from \"./types\"\r\n\r\nconst reducer = (state, { type, payload }) => {\r\n  switch (type) {\r\n    case TYPES.ADD_TODO:\r\n      state.todoList.unshift({\r\n        id: Math.random(),\r\n        name: payload,\r\n        complete: false,\r\n      });\r\n      return;\r\n\r\n    case TYPES.REMOVE_TODO:\r\n      state.todoList = state.todoList.filter((todo) => todo.id !== payload);\r\n      return;\r\n\r\n    case TYPES.TOGGLE_TODO:\r\n      state.todoList[payload].complete = !state.todoList[payload].complete;\r\n      return;\r\n\r\n    case TYPES.FETCH_TODO:\r\n      state.status = 0;\r\n      state.fetchTodo = !state.fetchTodo;\r\n      return;\r\n\r\n    case TYPES.FETCH_TODO_SUCCESS:\r\n      state.todoList = payload;\r\n      state.status = 1;\r\n      return;\r\n\r\n    case TYPES.FETCH_TODO_ERROR:\r\n      state.status = 2;\r\n      return;\r\n\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","const configs = {\r\n  todoAPI: \"https://todo-api-zeta.vercel.app/\",\r\n};\r\n\r\nexport default configs;\r\n","import React, { createContext, useEffect } from \"react\";\r\nimport { useImmerReducer } from \"use-immer\";\r\nimport reducer from \"./reducers\";\r\nimport Axios from \"axios\";\r\nimport TYPES from \"./types\"\r\nimport configs from \"../settings\";\r\n\r\nconst initialState = {\r\n  todoList: [],\r\n  fetchTodo: true,\r\n  status: 0, // 0:loading, 1:success, 2:error\r\n};\r\n\r\nconst TodoContext = createContext();\r\nconst ContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useImmerReducer(reducer, initialState);\r\n\r\n  const fetchTodoList = () => {\r\n    Axios.get(configs.todoAPI)\r\n      .then((response) =>\r\n        dispatch({ type: TYPES.FETCH_TODO_SUCCESS, payload: response.data })\r\n      )\r\n      .catch(() => dispatch({ type: TYPES.FETCH_TODO_ERROR }));\r\n  };\r\n\r\n  // useEffect hook to fetch data from API\r\n  useEffect(fetchTodoList, [state.fetchTodo]);\r\n\r\n  return (\r\n    <TodoContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n\r\nexport { TodoContext, ContextProvider };\r\n","import React, { useContext } from \"react\";\r\nimport { TodoContext } from \"../context\";\r\n\r\nconst Todocounter = () => {\r\n  const {state} = useContext(TodoContext);\r\n  const todoCount = state.todoList.filter((i) => i.complete === false).length;\r\n  const doneCount = state.todoList.filter((i) => i.complete === true).length;\r\n\r\n  return (\r\n    <div className='counter'>\r\n      <span>Completed: {doneCount}</span>\r\n      <span>Todo: {todoCount}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todocounter;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { TodoContext } from \"../context\";\r\nimport TYPES from \"../context/types\";\r\n\r\nconst Todoinput = () => {\r\n  const [todo, setTodo] = useState(\"\");\r\n  const { dispatch } = useContext(TodoContext);\r\n\r\n  const handleOnClick = (e) => {\r\n    e.preventDefault();\r\n    setTodo(\"\");\r\n\r\n    todo && dispatch({ type: TYPES.ADD_TODO, payload: todo });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={todo}\r\n        onChange={(e) => setTodo(e.target.value)}\r\n      />\r\n      <button onClick={handleOnClick}>Add</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todoinput;\r\n","import React, { useContext } from \"react\";\r\nimport { TodoContext } from \"../context\";\r\nimport TYPES from \"../context/types\";\r\n\r\nconst Todolist = () => {\r\n  const { state, dispatch } = useContext(TodoContext);\r\n\r\n  const handleOnChange = (index) => {\r\n    dispatch({type: TYPES.TOGGLE_TODO, payload: index})\r\n  };\r\n  const handleOnclick = (id) => {\r\n    dispatch({ type: TYPES.REMOVE_TODO, payload: id});\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {state.todoList.map((todo, index) => (\r\n        <li key={todo.id} className={todo.complete ? 'completed' : null}>\r\n          <input\r\n            id={todo.id}\r\n            type=\"checkbox\"\r\n            onChange={() => handleOnChange(index)}\r\n          ></input>\r\n          <label htmlFor={todo.id}>{todo.name}</label>\r\n          <button onClick={() => handleOnclick(todo.id)}>X</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Todolist;\r\n","import React from \"react\";\r\n\r\nconst Toggle = ({ show, children }) => {\r\n  if (!show) return null;\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default Toggle;\r\n","import React, { useContext } from \"react\";\r\nimport TodoCounter from \"./components/TodoCounter\";\r\nimport TodoInput from \"./components/TodoInput\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport Toggle from \"./components/Toggle\";\r\nimport { TodoContext } from \"./context\";\r\nimport TYPES from \"./context/types\";\r\n\r\nfunction App() {\r\n  const { state, dispatch } = useContext(TodoContext);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Todo</h1>\r\n      <Toggle show={state.status === 0}>loading...</Toggle>\r\n      <Toggle show={state.status === 1}>\r\n        <TodoCounter />\r\n        <TodoInput />\r\n        <TodoList />\r\n        <button onClick={() => dispatch({ type: TYPES.FETCH_TODO })}>Reset</button>\r\n      </Toggle>\r\n      <Toggle show={state.status === 2}>\r\n        <div className='error'>Error while loading data</div>\r\n        <button onClick={() => dispatch({ type: TYPES.FETCH_TODO })}>Retry</button>\r\n      </Toggle>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ContextProvider } from \"./context\";\r\nimport { debugContextDevtool } from \"react-context-devtool\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContextProvider>\r\n      <App />\r\n    </ContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// Debugging: Attach root container\r\ndebugContextDevtool(document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}